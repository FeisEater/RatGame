16.12.2013	Created a github repository, created a project directory,
		wrote a short project description, other text files.
		2 hours.

		Implemented a timer. Made some test for it, that don't
		exactly cover everything. 3 hours.

17.12.2013	Added some constant variables. 30 minutes
		Implemented an Entity and its subclass Ball. Balls can
		move. Added appropriate tests. 1,5 hours.

		Moved ball's moving functionality to the MoveableEntity
		superclass. Added Rat that inherits it. Made appropriate
		tests. 1 hour.

		Figured out how to implement an EntityList, that can
		filter entities by the interface they implement. Started
		making tests for it. 2 hours.

		Fixed up iheritance. 30 minutes.

18.12.2013	Implemented ball's bouncing ability. Took longer than
		expected, no tests yet. 2,5 hours.

		Removed temporarily ball's bouncing ability, migrated
		collision detection algorithm to Moveable. Made more
		thorough tests. 2 hours.

		Reimplemented ball's bouncing ability. Going to test
		it tomorrow. 2 hours.

19.12.2013	Made tests for Ball. Readjusted packages. 1 hour.

		Added tail stretching and cheese eating abilities for
		Rat. Ball calls Rat's die() method when it hits Rat or
		its tail. Made some tests for all of this except the
		dying ability. 4 hours.

20.12.2013	Added Hidable interface, Border class that implements it.
		Redesigned collision responsibilities, will finish tomorrow.
		2 hours.

21.12.2013	Moved checkCollisions() method to Moveable, implementations
		must call reactToCollision() to do appropriate actions
		depending on object collided upon. Added removeAll() method
		to EntityList

		Integrated tail creation algorithm with the new checkCollision()
		method. Cleaned up other things in the code. 30 minutes.

		Refactored code involving position correction after collision,
		most of the code is now in Moveable class. 1 hour.

22.12.2013	Caught up with testing. Many things are not tested multiple
		times. Also testing code may have to be cleaned up. 1,5 hours.

		Rat can kill itself if it collides with its own tail. I don't
		test for dying for now because I didn't implement any
		concequences for death yet. 1 hour.

23.12.2013	Made the program run an updatable window. Removed redundant
		methods from Tools (FindAllClasses()). 1,5 hours.

		Demoed to myself how ball bounces off window's borders.
		30 minutes.

		Implemented a KeyListener, Rat is now controlled by
		arrow keys. 2 hours.

26.12.2013	Implemented an entity positioning algorithm that checks if
		the spot is free and if it isn't, places the entity somewhere
		else nearby. Made tests for it. Will need refactoring most
		likely. 4 hours.

		RottaPeli creates all the necessary entities needed for the
		game. Made tests for PlayerInput class. 1,5 hours.

		Wrote JavaDoc for Ball. 30 minutes.

27.12.2013	Game can be paused. On death Rat and Balls reset position.
		1 hour.

		Made RottaPeli class a central hub for other components.
		Now all components have to communicate with each other
		through RottaPeli. Made alternative construcotors for
		Entity and for many of its subclasses. These constructors
		don't require position as parameter, calling defaultPosition()
		instead. 1,5 hours.

		Collision algorithm can now make a distinction if entities
		are simply touching sides or whether one is inside another.
		Rat tells RottaPeli to reset Balls. 1,5 hours.

28.12.2013	Added ScoreKeeper. Implemented score adding and life losing
		logic. Losing all lives ends the game. Going to try to
		figure out how to use JLabels reasonably. 2,5 hours.

29.12.2013	Caught up with tests. Some of them may not pass because of
		a coincidence. For example one test tests if balls are placed
		in a random location, and it fails when randomly generated
		location is same as its previous location. 3 hours.

30.12.2013	Refactored some segments of the code. 2 hours.

31.12.2013	Made javaDoc for all rottapeli.domain and rottapeli.gui
		classes and public methods. 2,5 hours.

		Finished javaDoc. 3 hours.

2.1.2014	Experimented with JSwing API. Main problem was to have layered
		components: have a game in the background and menu selection
		on the foreground. Solved the problem with OverlayLayout,
		which according to the internet is old and unsupported. Tried
		and failed to solve the problem with JLayeredPane, which should
		have been more up-to-date. Reimplemented PlayerInput to extend
		from KeyEventDispatcher rather than KeyListener. 3 hours.

3.1.2014	Redesigned class structure, progressed developing gui. 2 hours.

		Started implementing main menu. New game button resets game.
		Pausing the game makes main menu visible. If game is paused,
		Continue game button is available which will unpause the game.
		When game is over, main menu becomes visible. Exit button
		ends the program. 3 hours.